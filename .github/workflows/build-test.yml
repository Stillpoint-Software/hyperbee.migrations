# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build and Unit Test

on:
  workflow_dispatch:
env: 
   BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
   LPOINT: ${{ secrets.NUGET_SOURCE_LPOINT}}
   
jobs:
  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Master Configuration
      if: ${{env.BRANCH_NAME =='master' }}
      run: |
          echo "BUILD_CONFIGURATION=Release" >> $GITHUB_ENV
          echo "VERSION_SUFFIX= ' '" >> $GITHUB_ENV 
   
    - name: Debug Configuration
      if: ${{ env.BRANCH_NAME == 'develop'}}
      run: |
          echo "BUILD_CONFIGURATION=Debug" >> $GITHUB_ENV
          echo "VERSION_SUFFIX=develop.$(date +'%y%m%d%H%M%S')" >> $GITHUB_ENV
          
    - name: Get code
      uses: actions/checkout@v3
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
          
    - name: Restore dependencies
      run: dotnet restore --source ${{ env.LPOINT}} --source https://www.nuget.org/api/v2/
      
    - name: Build
      run: dotnet build --no-restore --configuration ${{env.BUILD_CONFIGURATION}}
      
    - name: Install Unit Test tool
      run: |
        echo 'REPORTS_PATH=./test-reports/build_${{github.run_number}}' >> $GITHUB_ENV
        dotnet tool install -g trx2junit
      
    - name: Run Unit Tests
      run: dotnet test --no-build --configuration ${{env.BUILD_CONFIGURATION}} --logger:trx --results-directory:./TestResults
      
    - name: Unit Test Post-processing
      run: |
        echo 'export PATH="$PATH:/root/.dotnet/tools"' >> "$GITHUB_ENV"
        trx2junit ./TestResults/*.trx
