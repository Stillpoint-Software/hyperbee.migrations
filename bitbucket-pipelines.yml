#  Template publish .NET Core package to nuget.org

#  This template allows you to publish your .NET Core package to nuget.org.
#  The workflow allows running tests, code linting and security scans on feature branches (as well as master).
#  The .NET Core package will be validated and published after the code is merged to master.

image: mcr.microsoft.com/dotnet/sdk:6.0

pipelines:
  custom:
    build-test:
      - step:
          name: Build and Unit Test
          caches:
              - dotnetcore
          script:
              # Build Solution
              #
              - export SOLUTION_NAME=Hyperbee.Migrations
              - export CONFIGURATION=Debug
              - dotnet restore ${SOLUTION_NAME}.sln --source ${NUGET_SOURCE_LPOINT}
              - dotnet build --no-restore ${SOLUTION_NAME}.sln --configuration ${CONFIGURATION}
              # Run Unit Tests
              #
              - REPORTS_PATH=./test-reports/build_${BITBUCKET_BUILD_NUMBER}
              - dotnet tool install -g trx2junit
              - dotnet test --no-build --logger:trx --results-directory:./TestResults
          after-script:
              # Unit Test Post-Processing
              # Convert trx result format to junit
              - export PATH="$PATH:/root/.dotnet/tools"
              - trx2junit ./TestResults/*.trx

    build-test-publish:
      - step:
          name: Publish Packages
          caches:
              - dotnetcore
          script:
              # Build Solution
              #
              - export SOLUTION_NAME=Hyperbee.Migrations
              - export CONFIGURATION=Debug
              - echo 'before restore'
              - dotnet restore ${SOLUTION_NAME}.sln --source https://www.myget.org/F/lpoint/auth/01429c3b-aacd-4dba-8fba-74cc294ed537/api/v3/index.json
              - echo 'after restore'
              - echo 'before build'
              - dotnet build --no-restore ${SOLUTION_NAME}.sln --configuration ${CONFIGURATION}
              - echo 'after build'
              # Run Unit Tests
              #
              - REPORTS_PATH=./test-reports/build_${BITBUCKET_BUILD_NUMBER}
              - dotnet tool install -g trx2junit
              - dotnet test --no-build --logger:trx --results-directory:./TestResults
              # Pack and Publish
              # Auto publishes projects with PublishAfterPack property
              #
              - export VERSION_SUFFIX="develop."$(date +%y%m%d%H%M%S)
              - dotnet pack --no-build --configuration ${CONFIGURATION} --output ./output --version-suffix ${VERSION_SUFFIX} -p:PackageSource='$NUGET_SOURCE_LPOINT' -p:PushAfterPack=true
          after-script:
              # Unit Test Post-Processing
              # Convert trx result format to junit
              - export PATH="$PATH:/root/.dotnet/tools"
              - trx2junit ./TestResults/*.trx
